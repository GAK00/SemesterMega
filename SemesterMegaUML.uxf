<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>483</x>
      <y>420</y>
      <w>161</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
-head : IntNode*
-size : int
--
+ IntNodeArray(int) : constructor
+getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int,int) : void
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>644</x>
      <y>238</y>
      <w>203</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>Timer
--
-executionTime : long
--
+ startTimer: void
+ stopTimer: void
+ resetTimer: void
+ displayTimerInformation: void
+ getExecutionTimeinMicroseconds: long
+Timer: void
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>595</x>
      <y>413</y>
      <w>182</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>IntNode
--
-nodeData : int
-nodePointer : IntNode*

--
+getNodeData():int
+getNodePointer(): IntNode*
+setNodeData(int): void
+setNodePointer(IntNode*):void

+IntNode(): constructor
+IntNode(int) : constructor
+IntNode(int, IntNode*): constructor

fg=black
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>462</x>
      <y>189</y>
      <w>98</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>Created by
Geran Kunz
bg=dark_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>553</x>
      <y>413</y>
      <w>161</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>644</x>
      <y>343</y>
      <w>252</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
Contructors
+Node&lt;Type();
+Node&lt;Type&gt;(int);
+Node&lt;Type&gt;(int,int);
Methods
+getNodeData() : Type
+GetNodePointer() Node&lt;Type&gt; *
+setNodeData(Typ e value): void
+setNodePointer(Node&lt;Type&gt;*): void
bg=red
transparency=30</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>112</x>
      <y>203</y>
      <w>287</w>
      <h>266</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
-front : Node&lt;Type&gt; *
-size : int
--
+Array() : default constructor
+Array&lt;Type&gt;(int size) : constructor
+ ~Array&lt;Type&gt;():destructor
+Array&lt;Type&gt;(const Array&lt;Type&gt; &amp;toBeCopied) : copy constructor
+getSize():int
+getFromIndex(int index) : Type
+setAtIndex(int index, Type value):void
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>217</x>
      <y>462</y>
      <w>651</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0;910.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>63</x>
      <y>0</y>
      <w>287</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>Model::List&lt;Type&gt;
-
-size : int
-front : Node&lt;Type&gt;*
-
+List&lt;Type&gt;(): constructor
+List&lt;Type&gt;(contList&lt;Type&gt; &amp;source):copy construtor
+~List &lt;Type&gt;():destructor

+ addAtIndex(int index, Type value): void
+ add(Type value): void
+ remove(int index):Type
+ setAtIndex(int index, Type data):Type
+ getFromINdex(int index): Type
+ contaion(Type data) : bool
+ getSize() const : int
+ getFront()cost: Node&lt;Type&gt;*
bg=magenta
transparency=60</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>210</x>
      <y>175</y>
      <w>448</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;320.0;10.0;320.0;330.0;620.0;330.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>518</x>
      <y>525</y>
      <w>469</w>
      <h>217</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
-nodeData : Type
-nextPointer : BiDirectionalNode&lt;Type&gt; *
-previousPointer : BiDirectionalNode&lt;Type&gt; *
--
Contructor
+BiDirectionalNode&lt;Type&gt;();
+BiDirectionalNode&lt;Type&gt;(Type data);
+BiDirectionalNOde&lt;Type&gt;(Type data, BDN&lt;Type&gt; * nextPointer,BDN&lt;Type&gt;* previousPointer)
Methods
+getNodeData():Type
+getNextPointer():BiDrectioinalNode&lt;Type&gt;*
+getPreviousPointer():BiDirectionalNode&lt;Type&gt;*
+setNodeData(Type value):void
+setNextPointer(BiDirectionNode&lt;Type&gt; newPointer): void
+setPreviousPointer(BiDirectionalNode&lt;Type&gt; newPointer): void
bg=blue
transparency=70</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>763</x>
      <y>518</y>
      <w>91</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1029</x>
      <y>525</y>
      <w>469</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>/DoubleList&lt;Type&gt;/
--
-size : int
-front : BiDirectionalNode&lt;Type&gt; *
-end :  BiDirectionalNode&lt;Type&gt; *
--
Methods
Vitual
+getSize()const : int
+getFront()const : BiDirectionalNode&lt;Type&gt; *
+getEnd()const : BiDirectionalNode&lt;Type&gt; *
Virtual
+ add(Type value):void
+ remove(int index) : Type
bg=red
transparency=50</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>980</x>
      <y>609</y>
      <w>63</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1071</x>
      <y>742</y>
      <w>266</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>360.0;10.0;360.0;140.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1071</x>
      <y>875</y>
      <w>210</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model::CircularList&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type&gt; *
-end: BiDirectionalNode&lt;Type&gt;*
-size: int
--
+CircularList(): constructor
+~CircularList(): desturctor

+add(Type data) : void
+remove(int index) : Type

+addAtIndex(Type data, int index): void
bg=pink
transparency=80</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>483</x>
      <y>875</y>
      <w>217</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model::Queue&lt;Type&gt;
--
-front: BiDirectionalNode&lt;Type&gt; *
-end: BiDirectionalNode&lt;Type&gt;*
-size: int
--
+Queue(): constructor
+~Queue(): desturctor

+add(Type data) : void
+remove(int index) : Type

+enqueue(Type data): void
+dequeue(): Type
+peek():Type
bg=yellow
transparency=80</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>665</x>
      <y>742</y>
      <w>672</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>940.0;10.0;940.0;140.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>875</y>
      <w>182</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model::Stack
--
-front: BiDirectionalNode&lt;Type&gt; *
-end: BiDirectionalNode&lt;Type&gt;*
-size: int
--
+Stack(): constructor
+~Stack(): desturctor

+add(Type data) : void
+remove(int index) : Type

+push(Type data): void
+pop(): Type
+peek():Type
bg=orange
transparency=80</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>833</x>
      <y>742</y>
      <w>504</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>700.0;10.0;700.0;140.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>882</x>
      <y>875</y>
      <w>189</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model::FastList
--
-front: BiDirectionalNode&lt;Type&gt; *
-end: BiDirectionalNode&lt;Type&gt;*
-size: int
--
+FastList(): constructor
+~FastList(): desturctor

+add(Type data) : void
+remove(int index) : Type
+addAtIndex(Type data): void
bg=green
transparency=80</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>903</x>
      <y>742</y>
      <w>434</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>600.0;10.0;600.0;140.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>889</x>
      <y>427</y>
      <w>91</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>973</x>
      <y>420</y>
      <w>70</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
-nodeData : Type
- rootPointer : BinarySearhTreeNode&lt;Type&gt; *
- rihgtChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--
+getRootPointer() : BinarySeaerchTreeNode&lt;Type&gt;*
+getLeftChildPointer() : BinarySearchTreeNode&lt;Trype&gt;*
+getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+setRootChildPointer(BinarySearchTreeNode&lt;Type * root&gt; : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * right) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>133</x>
      <y>553</y>
      <w>217</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>/Model::Tree&lt;Type&gt;/
-size : int
-height:int
- complete : bool
-balanced : bool
--
+getSize(); int
+getHeight() ing
+ isComplete : bool 
+ isBalanced() :; bool
+ setSize(int size) : void
+ setHeihgt(int height) : void
+ setComplete(bool complete) : void
+ setBalancd(bool blanced) : void
+inOrderTraversal() : void
+ preOrderTraversal() : void
+postOrderTraversal();</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>126</x>
      <y>770</y>
      <w>343</w>
      <h>217</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
+BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor
-root : BinarySearchTreeNode&lt;Type&gt;*
- heihgt : int
- complete : bool
- balanced : bool
--
+ getRoot() : BinarySearchTreeNode&lt;Type&gt;*
+ setRooot(BinarySearchTreeNoe&lt;Type&gt;*): void

+ calculateSize(BinarySearchTreeNode&lt;Type&gt;*): void

+inOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*): void
+preOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*):void
+postOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>224</x>
      <y>742</y>
      <w>224</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;300.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>441</x>
      <y>434</y>
      <w>574</w>
      <h>350</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>800.0;10.0;10.0;480.0</additional_attributes>
  </element>
</diagram>
